Zhat = sparse.model.matrix(~as.factor(kmap$clust)-1)
zz = solve(t(Zhat)%*%Zhat)
bhat = zz%*%t(Zhat)%*%a%*%Y%*%yy
B0=round(bhat*3239)
return(B0)
}
n=rep(0,8)
n[1]=length(unique(lepe$parent_url));n[2]=length(unique(joly$parent_url));
n[3]=length(unique(bayr$parent_url));n[4]=length(unique(holl$parent_url));
n[5]=length(unique(mele$parent_url));n[6]=length(unique(dupo$parent_url));
n[7]=length(unique(sark$parent_url));n[8]=length(unique(pout$parent_url));
cc = c()
for(i in 1:length(n)) cc = c(cc, rep(i,n[i]))
B0=createB(cc,allpostfans,8)
B0=createB(cc,allpostfans,8)
a = allpostfans
ncluster = 8
Y = model.matrix(~as.factor(cc)-1)
yy = solve(t(Y)%*%Y)
ap = a%*%Y%*%yy
apn =t(apply(ap,1,function(x) return(x/sqrt(sum(x^2)))))
kmap = kmeans(apn, ncluster, nstart = 100)
Zhat = sparse.model.matrix(~as.factor(kmap$clust)-1)
zz = solve(t(Zhat)%*%Zhat)
bhat = zz%*%t(Zhat)%*%a%*%Y%*%yy
B0=round(bhat*3239)
B0
B1=B0[c(5,7,8,4,3,6,2,1),]# diagnol
B=matrix(rep(0,64),nrow=8)
for(i in 1:8)
{B[i,]=B1[i,]}
rn=c("Fc 1", "Fc 2", "Fc 3", "Fc 4", "Fc 5", "Fc 6", "Fc 7", "Fc 8")
cn=c("Lepen", "Joly", "Bayrou", "Hollande", "Melenchon", "Dupont", "Sarkozy", "Poutou")
rownames(B)=rn
colnames(B)=cn
balloonPlot = function(M, logTran, sqrtTran, main, namesx, namesy, margin, mult){
# M is a matrix. want to plot each element as a dot.
# dot size corresponds to magnitude.
# dot color black/red corresponds to sign.
n = nrow(M)
d = ncol(M)
scaleItMean = mean(abs(M))
if(logTran){
scaleItMean = mean(log(abs(M) +1))
}
if(sqrtTran){
scaleItMean = mean(sqrt(abs(M)))
}
par(mar = c(margin,margin,2,2))
plot(c(.5,d+.5), c(.5,n+.5), col = "white", main = main, axes = F, ylab = "", xlab ="")
if(length(namesx) !=F)    axis(1, at = 1:d, labels = namesx, lty = 0, las = 2)
if(length(namesy) !=F)    axis(2, at = n:1, labels = namesy, lty = 0, las = 2)
for(i in 1:n){
for(j in 1:d){
dotSize = abs(M[i,j])/scaleItMean
if(logTran) dotSize = log(dotSize + 1)/scaleItMean
if(sqrtTran) dotSize = sqrt(dotSize)/scaleItMean
dotColor = "black"
if(M[i,j] < 0) dotColor = "red"
points(j,n+1 - i, pch = 19, cex = dotSize*mult, col = dotColor)
}
}
}
par(mfrow=c(1,1))
balloonPlot(B,TRUE,FALSE,"fan clusters vs post clusters",cn,rn,4,1)
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/svdallpostfannorm.RData")
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allpostfans.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/postdates.RData")
ncluster=8;ndate=length(unidate);npost=length(allpostfans[1,])
v = sf$v[,1:ncluster]
v = t(apply(v,1,function(x) return(x/sqrt(sum(x^2)))))
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/strkm8.RData")
createB <- function(cc,a,ncluster)
{
Y = model.matrix(~as.factor(cc)-1)
yy = solve(t(Y)%*%Y)
ap = a%*%Y%*%yy
apn =t(apply(ap,1,function(x) return(x/sqrt(sum(x^2)))))
kmap = kmeans(apn, ncluster, nstart = 1000)
Zhat = sparse.model.matrix(~as.factor(kmap$clust)-1)
zz = solve(t(Zhat)%*%Zhat)
bhat = zz%*%t(Zhat)%*%a%*%Y%*%yy
B0=round(bhat*3239)
return(B0)
}
B0=createB(cc,allpostfans,ncluster)
B0
B1=B0[c(8,7,4,5,1,2,6,3),]
B1
B=matrix(rep(0,64),nrow=8)
for(i in 1:8)
{B[i,]=B1[i,]}
rn=c("Fc 1", "Fc 2", "Fc 3", "Fc 4", "Fc 5", "Fc 6", "Fc 7", "Fc 8")
cn=c("Lepen", "Joly", "Bayrou", "Hollande", "Melenchon", "Dupont", "Sarkozy", "Poutou")
rownames(B)=rn
colnames(B)=cn
B
par(mfrow=c(1,1))
balloonPlot = function(M, logTran, sqrtTran, main, namesx, namesy, margin, mult){
# M is a matrix. want to plot each element as a dot.
# dot size corresponds to magnitude.
# dot color black/red corresponds to sign.
n = nrow(M)
d = ncol(M)
scaleItMean = mean(abs(M))
if(logTran){
scaleItMean = mean(log(abs(M) +1))
}
if(sqrtTran){
scaleItMean = mean(sqrt(abs(M)))
}
par(mar = c(margin,margin,2,2))
plot(c(.5,d+.5), c(.5,n+.5), col = "white", main = main, axes = F, ylab = "", xlab ="")
if(length(namesx) !=F)  	axis(1, at = 1:d, labels = namesx, lty = 0, las = 2)
if(length(namesy) !=F)    axis(2, at = n:1, labels = namesy, lty = 0, las = 2)
for(i in 1:n){
for(j in 1:d){
dotSize = abs(M[i,j])/scaleItMean
if(logTran) dotSize = log(dotSize + 1)/scaleItMean
if(sqrtTran) dotSize = sqrt(dotSize)/scaleItMean
dotColor = "black"
if(M[i,j] < 0) dotColor = "red"
points(j,n+1 - i, pch = 19, cex = dotSize*mult, col = dotColor)
}
}
}
rn = c("A cluster 1", "A cluster 2", "A cluster 3","A cluster 4",
"A cluster 5", "A cluster 6", "A cluster 7","A cluster 8")
cn = c("B cluster 1", "B cluster 2", "B cluster 3","B cluster 4",
"B cluster 5", "B cluster 6", "B cluster 7","B cluster 8")
balloonPlot(B,TRUE,FALSE,"fan clusters vs post clusters",cn,rn,4,1)
rn = c("A clus 1", "A clus 2", "A clus 3","A clus 4",
"A clus 5", "A clus 6", "A clus 7","A clus 8")
cn = c("B clus 1", "B clus 2", "B clus 3","B clus 4",
"B clus 5", "B clus 6", "B clus 7","B clus 8")
balloonPlot(B,TRUE,FALSE,"fan clusters vs post clusters",cn,rn,4,1)
rn = c("A clus 1", "A clus 2", "A clus 3","A clus 4",
"A clus 5", "A clus 6", "A clus 7","A clus 8")
cn = c("B clus 1", "B clus 2", "B clus 3","B clus 4",
"B clus 5", "B clus 6", "B clus 7","B clus 8")
main = NULL
balloonPlot(B,TRUE,FALSE,main,cn,rn,4,1)
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allpostfans.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/n.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/svddeletestructure.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/postdates.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/delstrkm5.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allposts.RData")
ncluster=5;ndate=length(unidate);npost=length(allpostfans[1,])
v = sdelete$v[,1:ncluster]
v = t(apply(v,1,function(x) return(x/sqrt(sum(x^2)))))
kmcluster=km5$cluster
centers = km5$centers
size = km5$size
D2 <- function(x)
{
return(x%*%t(x))
}
score=oscore=postod=rep(0,npost);ave_score=rep(0,ncluster);
for (i in 1:ncluster)
{
ci=which(kmcluster==i)
dc=as.matrix(centers[i,])
d2=D2(t(dc))
proj=(v[ci,]%*%dc)%*%t(dc)/as.numeric(d2)
score[ci]=apply(proj,1,D2)
ave_score[i]=mean(score[ci])
oscore[ci]=sort(score[ci],decreasing=TRUE)
postod[ci]=match(score[ci],oscore)
}
size
summary(score)
plot(ave_score)
str(oscore)
str(postod)
oas=sort(ave_score,decreasing=TRUE)
clusod=match(ave_score,oas)
postid = colnames(allpostfans)
canid = c("Lepen","Joly","Bayrou","Hollande","Melenchon","Dupont","Sarkozy","Poutou")
candidate = NULL; for (i in 1:8) {candidate = c(candidate, rep(canid[i],n[i]))}
clusid = clusod[kmcluster]
#postod
#oscore
posttext = allposts$posttext
postdate = allposts$postdate
DP=data.frame(postid,candidate,clusid,postod,oscore,posttext,postdate)
DPo=DP[with(DP,order(clusid,postod)),]
#DPo$clusid
#DPo$postod
#DPo$oscore
DPO = DPo[,c(1,2,3,4,6,7)]
save(DPO, file = "C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/DPO.RData")
###############################################################
B=matrix(0,nrow=ncluster, ncol=8)
for (i in 1:ncluster)
{
ci=which(DPO$clusid==i)
for (j in 1:8)
{
cij = which(DPO$candidate[ci]==canid[j])
B[i,j] = length(cij)
}
}
nr = c("cluster 1","cluster 2", "cluster 3","cluster 4", "cluster 5")
nc = canid
balloonPlot(B, TRUE, FALSE, "# of posts of candidate j in cluster i", nc, nr, 4,1)
rowSums(B)
##########################################################################
unidate = unique(DPO$postdate)
ndatec = length(unidate)/2
dateg=rep(0,ndatec+1);for (j in 1:ndatec) {dateg[j+1]=2*j}
timeB = matrix(0, nrow = ncluster, ncol = ndatec)
balloonPlot = function(M, logTran, sqrtTran, main, namesx, namesy, margin, mult){
# M is a matrix. want to plot each element as a dot.
# dot size corresponds to magnitude.
# dot color black/red corresponds to sign.
n = nrow(M)
d = ncol(M)
scaleItMean = mean(abs(M))
if(logTran){
scaleItMean = mean(log(abs(M) +1))
}
if(sqrtTran){
scaleItMean = mean(sqrt(abs(M)))
}
par(mar = c(margin,margin,2,2))
plot(c(.5,d+.5), c(.5,n+.5), col = "white", main = main, axes = F, ylab = "", xlab ="")
if(length(namesx) !=F)  	axis(1, at = 1:d, labels = namesx, lty = 0, las = 2)
if(length(namesy) !=F)    axis(2, at = n:1, labels = namesy, lty = 0, las = 2)
for(i in 1:n){
for(j in 1:d){
dotSize = abs(M[i,j])/scaleItMean
if(logTran) dotSize = log(dotSize + 1)/scaleItMean
if(sqrtTran) dotSize = sqrt(dotSize)/scaleItMean
dotColor = "black"
if(M[i,j] < 0) dotColor = "red"
points(j,n+1 - i, pch = 19, cex = dotSize*mult, col = dotColor)
}
}
}
balloonPlot(B, TRUE, FALSE, "# of posts of candidate j in cluster i", nc, nr, 4,1)
rowSums(B)
##########################################################################
unidate = unique(DPO$postdate)
ndatec = length(unidate)/2
dateg=rep(0,ndatec+1);for (j in 1:ndatec) {dateg[j+1]=2*j}
timeB = matrix(0, nrow = ncluster, ncol = ndatec)
for (i in 1:ncluster)
{
for (j in 1:ndatec)
{
ci=which(DPO$clusid==i)
xi=mdates[ci]
timeB[i,j]=sum((xi>dateg[j]) & (xi<=dateg[j+1]))
}
}
Bt = cbind(rowSums(timeB[,1:18]),timeB[,19:51])
nr = c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
nc = c("","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","");
nc[11]="3-20";nc[27]="4-22";nc[34]="5-06"
balloonPlot(Bt,TRUE,FALSE,"time structure",nc,nr,4,1)
########################################################################
unidate = unique(DPO$postdate)
ndatec = length(unidate)/2
dateg=rep(0,ndatec+1);for (j in 1:ndatec) {dateg[j+1]=2*j}
BTC = matrix(0, nrow = 8*ncluster, ncol = ndatec)
for (i in 1:ncluster)
{
ci = which(DPO$clusid==i)
for (j in 1:8)
{
cij = which(DPO$candidate[ci]==canid[j])
for (k in 1:ndatec)
{
xi=mdates[cij]
BTC[(i-1)*8+j,k]=sum((xi>dateg[k]) & (xi<=dateg[k+1]))
}
}
}
Btc = cbind(rowSums(BTC[,1:18]),BTC[,19:51])
nr = canid
nc = c("","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","");
nc[11]="3-20";nc[27]="4-22";nc[34]="5-06"
clusters = c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
for (i in 1:ncluster)
{
balloonPlot(Btc[((i-1)*8+1):(i*8),],TRUE,TRUE,clusters[i],nc,nr,4,1)
}
plot(oscore)
plot(sort(ave_score))
plot(sort(ave_score,decreasing=TRUE))
plot(sort(ave_score,decreasing=TRUE),ylab = "average score", xlab = "clusters")
write.csv(DPO, file = "delposts_new.csv",row.names=FALSE)
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/DPO.RData")
colnames(DPO)
summary(DPO$postod)
length(DPO$postod)
sort(DPO$postod)
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allpostfans.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/n.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/svddeletestructure.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/postdates.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/delstrkm5.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allposts.RData")
ncluster=5;ndate=length(unidate);npost=length(allpostfans[1,])
v = sdelete$v[,1:ncluster]
v = t(apply(v,1,function(x) return(x/sqrt(sum(x^2)))))
kmcluster=km5$cluster
centers = km5$centers
size = km5$size
D2 <- function(x)
{
return(x%*%t(x))
}
score=oscore=postod=rep(0,npost);ave_score=rep(0,ncluster);
for (i in 1:ncluster)
{
ci=which(kmcluster==i)
dc=as.matrix(centers[i,])
d2=D2(t(dc))
proj=(v[ci,]%*%dc)%*%t(dc)/as.numeric(d2)
score[ci]=apply(proj,1,D2)
ave_score[i]=mean(score[ci])
oscore[ci]=sort(score[ci],decreasing=TRUE)
postod[ci]=match(score[ci],oscore)
}
summary(postod)
postod[ci]
summary(postod[ci])
sort(postod[ci])
score=oscore=postod=rep(0,npost);ave_score=rep(0,ncluster);
for (i in 1:ncluster)
{
ci=which(kmcluster==i)
dc=as.matrix(centers[i,])
d2=D2(t(dc))
proj=(v[ci,]%*%dc)%*%t(dc)/as.numeric(d2)
score[ci]=apply(proj,1,D2)
ave_score[i]=mean(score[ci])
oscore[ci]=sort(score[ci],decreasing=TRUE)
postod[ci]=match(score[ci],oscore[ci])
}
summary(postod)
summary(postod[ci])
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allpostfans.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/n.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/svddeletestructure.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/postdates.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/delstrkm5.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allposts.RData")
ncluster=5;ndate=length(unidate);npost=length(allpostfans[1,])
v = sdelete$v[,1:ncluster]
v = t(apply(v,1,function(x) return(x/sqrt(sum(x^2)))))
kmcluster=km5$cluster
centers = km5$centers
size = km5$size
D2 <- function(x)
{
return(x%*%t(x))
}
score=oscore=postod=rep(0,npost);ave_score=rep(0,ncluster);
for (i in 1:ncluster)
{
ci=which(kmcluster==i)
dc=as.matrix(centers[i,])
d2=D2(t(dc))
proj=(v[ci,]%*%dc)%*%t(dc)/as.numeric(d2)
score[ci]=apply(proj,1,D2)
ave_score[i]=mean(score[ci])
oscore[ci]=sort(score[ci],decreasing=TRUE)
postod[ci]=match(score[ci],oscore[ci])
}
size
summary(score)
plot(ave_score)
plot(sort(ave_score,decreasing=TRUE),ylab = "average score", xlab = "clusters")
str(postod)
oas=sort(ave_score,decreasing=TRUE)
clusod=match(ave_score,oas)
postid = colnames(allpostfans)
canid = c("Lepen","Joly","Bayrou","Hollande","Melenchon","Dupont","Sarkozy","Poutou")
candidate = NULL; for (i in 1:8) {candidate = c(candidate, rep(canid[i],n[i]))}
clusid = clusod[kmcluster]
#postod
#oscore
posttext = allposts$posttext
postdate = allposts$postdate
DP=data.frame(postid,candidate,clusid,postod,oscore,posttext,postdate)
DPo=DP[with(DP,order(clusid,postod)),]
#DPo$clusid
#DPo$postod
#DPo$oscore
DPO = DPo[,c(1,2,3,4,6,7)]
save(DPO, file = "C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/DPO.RData")
write.csv(DPO, file = "delposts_new.csv",row.names=FALSE)
###############################################################
B=matrix(0,nrow=ncluster, ncol=8)
for (i in 1:ncluster)
{
ci=which(DPO$clusid==i)
for (j in 1:8)
{
cij = which(DPO$candidate[ci]==canid[j])
B[i,j] = length(cij)
}
}
nr = c("cluster 1","cluster 2", "cluster 3","cluster 4", "cluster 5")
nc = canid
balloonPlot(B, TRUE, FALSE, "# of posts of candidate j in cluster i", nc, nr, 4,1)
rowSums(B)
##########################################################################
unidate = unique(DPO$postdate)
ndatec = length(unidate)/2
dateg=rep(0,ndatec+1);for (j in 1:ndatec) {dateg[j+1]=2*j}
timeB = matrix(0, nrow = ncluster, ncol = ndatec)
for (i in 1:ncluster)
{
for (j in 1:ndatec)
{
ci=which(DPO$clusid==i)
xi=mdates[ci]
timeB[i,j]=sum((xi>dateg[j]) & (xi<=dateg[j+1]))
}
}
Bt = cbind(rowSums(timeB[,1:18]),timeB[,19:51])
nr = c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
nc = c("","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","");
nc[11]="3-20";nc[27]="4-22";nc[34]="5-06"
balloonPlot(Bt,TRUE,FALSE,"time structure",nc,nr,4,1)
########################################################################
unidate = unique(DPO$postdate)
ndatec = length(unidate)/2
dateg=rep(0,ndatec+1);for (j in 1:ndatec) {dateg[j+1]=2*j}
BTC = matrix(0, nrow = 8*ncluster, ncol = ndatec)
for (i in 1:ncluster)
{
ci = which(DPO$clusid==i)
for (j in 1:8)
{
cij = which(DPO$candidate[ci]==canid[j])
for (k in 1:ndatec)
{
xi=mdates[cij]
BTC[(i-1)*8+j,k]=sum((xi>dateg[k]) & (xi<=dateg[k+1]))
}
}
}
Btc = cbind(rowSums(BTC[,1:18]),BTC[,19:51])
nr = canid
nc = c("","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","");
nc[11]="3-20";nc[27]="4-22";nc[34]="5-06"
clusters = c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
for (i in 1:ncluster)
{
balloonPlot(Btc[((i-1)*8+1):(i*8),],TRUE,TRUE,clusters[i],nc,nr,4,1)
}
View(Btc)
y = c(68, 65, 76, 74, 76,
68, 77, 84, 65, 75,
73, 85, 72, 68, 62,
74, 76, 57, 79, 64,
80, 71, 76, 59, 68,
69, 75, 81, 68, 68,
60, 62, 62, 66, 40,
70, 55, 62, 57, 40,
61, 67, 53, 63, 69,
37, 53, 31, 48, 33)
basket = c("D", "A", "E", "C", "B",
"A", "E", "B", "D", "C",
"C", "B", "D", "E", "A",
"E", "C", "A", "B", "D",
"B", "D", "C", "A", "E",
"D", "E", "B", "A", "C",
"C", "D", "E", "B", "A",
"B", "A", "C", "E", "D",
"E", "C", "A", "D", "B",
"A", "B", "D", "C", "E")
grader = rep(1:5, 10)
student = rep(c(1:5,1:5), each = 5)
Rep = rep(1:2, each = 5)
data = data.frame(Y=y, Basket=as.factor(basket), Grader=as.factor(grader),
Student=as.factor(student), Rep=as.factor(Rep))
m1 = lmer(Y~Basket+Grader+Student:Rep+(1|Rep), data=data)
library("lme4", lib.loc="D:/Program Files (x86)/R-3.1.2patched/library")
m1 = lmer(Y~Basket+Grader+Student:Rep+(1|Rep), data=data)
xtable(anova(m1))
anova(m1)
library("xtable", lib.loc="D:/Program Files (x86)/R-3.1.2patched/library")
install.packages("xtable")
install.packages("xtable")
library("xtable", lib.loc="D:/Program Files (x86)/R-3.1.2patched/library")
xtable(aonva(m1))
xtable(anova(m1))
anova(m1)
library(multcomp)
install.packages("multcomp")
library(multcomp)
K = matrix(c(c(0,0,-1/3,-1/3,-1/3), rep(0,13)),1)
K = rbind(K, c(c(0, 1, -1/3, -1/3, -1/3), rep(0,13)))
test_contrast <- glht(m1, linfct = K)
summary(test_contrast)
