for (k in 1:ndatec)
{
xi=mdates[cij]
BTC[(i-1)*8+j,k]=sum((xi>dateg[k]) & (xi<=dateg[k+1]))
}
}
}
Btc = cbind(rowSums(BTC[,1:18]),BTC[,19:51])
nr = canid
nc = c("","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","");
nc[11]="3-20";nc[27]="4-22";nc[34]="5-06"
clusters = c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
for (i in 1:ncluster)
{
balloonPlot(Btc[((i-1)*8+1):(i*8),],TRUE,TRUE,clusters[i],nc,nr,4,1)
}
plot(oscore)
plot(sort(ave_score))
plot(sort(ave_score,decreasing=TRUE))
plot(sort(ave_score,decreasing=TRUE),ylab = "average score", xlab = "clusters")
write.csv(DPO, file = "delposts_new.csv",row.names=FALSE)
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/DPO.RData")
colnames(DPO)
summary(DPO$postod)
length(DPO$postod)
sort(DPO$postod)
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allpostfans.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/n.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/svddeletestructure.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/postdates.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/delstrkm5.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allposts.RData")
ncluster=5;ndate=length(unidate);npost=length(allpostfans[1,])
v = sdelete$v[,1:ncluster]
v = t(apply(v,1,function(x) return(x/sqrt(sum(x^2)))))
kmcluster=km5$cluster
centers = km5$centers
size = km5$size
D2 <- function(x)
{
return(x%*%t(x))
}
score=oscore=postod=rep(0,npost);ave_score=rep(0,ncluster);
for (i in 1:ncluster)
{
ci=which(kmcluster==i)
dc=as.matrix(centers[i,])
d2=D2(t(dc))
proj=(v[ci,]%*%dc)%*%t(dc)/as.numeric(d2)
score[ci]=apply(proj,1,D2)
ave_score[i]=mean(score[ci])
oscore[ci]=sort(score[ci],decreasing=TRUE)
postod[ci]=match(score[ci],oscore)
}
summary(postod)
postod[ci]
summary(postod[ci])
sort(postod[ci])
score=oscore=postod=rep(0,npost);ave_score=rep(0,ncluster);
for (i in 1:ncluster)
{
ci=which(kmcluster==i)
dc=as.matrix(centers[i,])
d2=D2(t(dc))
proj=(v[ci,]%*%dc)%*%t(dc)/as.numeric(d2)
score[ci]=apply(proj,1,D2)
ave_score[i]=mean(score[ci])
oscore[ci]=sort(score[ci],decreasing=TRUE)
postod[ci]=match(score[ci],oscore[ci])
}
summary(postod)
summary(postod[ci])
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allpostfans.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/n.RData')
load('C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/cc.RData')
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/svddeletestructure.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/postdates.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/delstrkm5.RData")
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/allposts.RData")
ncluster=5;ndate=length(unidate);npost=length(allpostfans[1,])
v = sdelete$v[,1:ncluster]
v = t(apply(v,1,function(x) return(x/sqrt(sum(x^2)))))
kmcluster=km5$cluster
centers = km5$centers
size = km5$size
D2 <- function(x)
{
return(x%*%t(x))
}
score=oscore=postod=rep(0,npost);ave_score=rep(0,ncluster);
for (i in 1:ncluster)
{
ci=which(kmcluster==i)
dc=as.matrix(centers[i,])
d2=D2(t(dc))
proj=(v[ci,]%*%dc)%*%t(dc)/as.numeric(d2)
score[ci]=apply(proj,1,D2)
ave_score[i]=mean(score[ci])
oscore[ci]=sort(score[ci],decreasing=TRUE)
postod[ci]=match(score[ci],oscore[ci])
}
size
summary(score)
plot(ave_score)
plot(sort(ave_score,decreasing=TRUE),ylab = "average score", xlab = "clusters")
str(postod)
oas=sort(ave_score,decreasing=TRUE)
clusod=match(ave_score,oas)
postid = colnames(allpostfans)
canid = c("Lepen","Joly","Bayrou","Hollande","Melenchon","Dupont","Sarkozy","Poutou")
candidate = NULL; for (i in 1:8) {candidate = c(candidate, rep(canid[i],n[i]))}
clusid = clusod[kmcluster]
#postod
#oscore
posttext = allposts$posttext
postdate = allposts$postdate
DP=data.frame(postid,candidate,clusid,postod,oscore,posttext,postdate)
DPo=DP[with(DP,order(clusid,postod)),]
#DPo$clusid
#DPo$postod
#DPo$oscore
DPO = DPo[,c(1,2,3,4,6,7)]
save(DPO, file = "C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/DPO.RData")
write.csv(DPO, file = "delposts_new.csv",row.names=FALSE)
###############################################################
B=matrix(0,nrow=ncluster, ncol=8)
for (i in 1:ncluster)
{
ci=which(DPO$clusid==i)
for (j in 1:8)
{
cij = which(DPO$candidate[ci]==canid[j])
B[i,j] = length(cij)
}
}
nr = c("cluster 1","cluster 2", "cluster 3","cluster 4", "cluster 5")
nc = canid
balloonPlot(B, TRUE, FALSE, "# of posts of candidate j in cluster i", nc, nr, 4,1)
rowSums(B)
##########################################################################
unidate = unique(DPO$postdate)
ndatec = length(unidate)/2
dateg=rep(0,ndatec+1);for (j in 1:ndatec) {dateg[j+1]=2*j}
timeB = matrix(0, nrow = ncluster, ncol = ndatec)
for (i in 1:ncluster)
{
for (j in 1:ndatec)
{
ci=which(DPO$clusid==i)
xi=mdates[ci]
timeB[i,j]=sum((xi>dateg[j]) & (xi<=dateg[j+1]))
}
}
Bt = cbind(rowSums(timeB[,1:18]),timeB[,19:51])
nr = c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
nc = c("","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","");
nc[11]="3-20";nc[27]="4-22";nc[34]="5-06"
balloonPlot(Bt,TRUE,FALSE,"time structure",nc,nr,4,1)
########################################################################
unidate = unique(DPO$postdate)
ndatec = length(unidate)/2
dateg=rep(0,ndatec+1);for (j in 1:ndatec) {dateg[j+1]=2*j}
BTC = matrix(0, nrow = 8*ncluster, ncol = ndatec)
for (i in 1:ncluster)
{
ci = which(DPO$clusid==i)
for (j in 1:8)
{
cij = which(DPO$candidate[ci]==canid[j])
for (k in 1:ndatec)
{
xi=mdates[cij]
BTC[(i-1)*8+j,k]=sum((xi>dateg[k]) & (xi<=dateg[k+1]))
}
}
}
Btc = cbind(rowSums(BTC[,1:18]),BTC[,19:51])
nr = canid
nc = c("","","","","","","","","","","","","","","","","","","","",
"","","","","","","","","","","","","","");
nc[11]="3-20";nc[27]="4-22";nc[34]="5-06"
clusters = c("cluster 1","cluster 2","cluster 3","cluster 4","cluster 5")
for (i in 1:ncluster)
{
balloonPlot(Btc[((i-1)*8+1):(i*8),],TRUE,TRUE,clusters[i],nc,nr,4,1)
}
View(Btc)
y = c(68, 65, 76, 74, 76,
68, 77, 84, 65, 75,
73, 85, 72, 68, 62,
74, 76, 57, 79, 64,
80, 71, 76, 59, 68,
69, 75, 81, 68, 68,
60, 62, 62, 66, 40,
70, 55, 62, 57, 40,
61, 67, 53, 63, 69,
37, 53, 31, 48, 33)
basket = c("D", "A", "E", "C", "B",
"A", "E", "B", "D", "C",
"C", "B", "D", "E", "A",
"E", "C", "A", "B", "D",
"B", "D", "C", "A", "E",
"D", "E", "B", "A", "C",
"C", "D", "E", "B", "A",
"B", "A", "C", "E", "D",
"E", "C", "A", "D", "B",
"A", "B", "D", "C", "E")
grader = rep(1:5, 10)
student = rep(c(1:5,1:5), each = 5)
Rep = rep(1:2, each = 5)
data = data.frame(Y=y, Basket=as.factor(basket), Grader=as.factor(grader),
Student=as.factor(student), Rep=as.factor(Rep))
m1 = lmer(Y~Basket+Grader+Student:Rep+(1|Rep), data=data)
library("lme4", lib.loc="D:/Program Files (x86)/R-3.1.2patched/library")
m1 = lmer(Y~Basket+Grader+Student:Rep+(1|Rep), data=data)
xtable(anova(m1))
anova(m1)
library("xtable", lib.loc="D:/Program Files (x86)/R-3.1.2patched/library")
install.packages("xtable")
install.packages("xtable")
library("xtable", lib.loc="D:/Program Files (x86)/R-3.1.2patched/library")
xtable(aonva(m1))
xtable(anova(m1))
anova(m1)
library(multcomp)
install.packages("multcomp")
library(multcomp)
K = matrix(c(c(0,0,-1/3,-1/3,-1/3), rep(0,13)),1)
K = rbind(K, c(c(0, 1, -1/3, -1/3, -1/3), rep(0,13)))
test_contrast <- glht(m1, linfct = K)
summary(test_contrast)
load("C:/Users/Administrator/Dropbox/my project/frenchFacebook/data/SRD.RData")
pv = vector()
for (i in 1:5)
{
pv[i]=length(which(SRD[,i]>SRD[1,i]))/100
}
pv
sd(SRD[-1,1])
SRD[1,1];mean(SRD[-1,1]);sd(SRD[-1,1])
SRD[1,1];mean(SRD[-1,1]);sd(SRD[-1,1]);(SRD[1,1]-mean(SRD[-1,1]))/sd(SRD[-1,1])
SRD[1,1];mean(SRD[-1,1]);sd(SRD[-1,1]);(SRD[1,1]-mean(SRD[-1,1]))/sd(SRD[-1,1])
SRD[1,2];mean(SRD[-1,2]);sd(SRD[-1,2]);(SRD[1,2]-mean(SRD[-1,2]))/sd(SRD[-1,2])
apply(SRD[-1,],2,mean)
apply(SRD[-1,],2,mean)[1:5]
pv
SRD[1,1:5]
apply(SRD[-1,],2,mean)[1:5]
apply(SRD[-1,],2,mean)[1:5]
apply(SRD[-1,],2,sd)[1:5]
sds = apply(SRD[-1,],2,sd)[1:5]
svds = SRD[1,1:5]
means = apply(SRD[-1,],2,mean)[1:5]
sds = apply(SRD[-1,],2,sd)[1:5]
(means-svds)/sds
(svds - means)/sds
context("drop")
test_that("drop", {
expect_equal( myround("https://www.facebook.com/123456789/posts/12345678"),
"123456789/posts/12345678")
})
library(testthat)
library(SpeClust)
context("drop")
test_that("drop", {
expect_equal( myround("https://www.facebook.com/123456789/posts/12345678"),
"123456789/posts/12345678")
})
context("drop")
test_that("drop", {
expect_equal( drop("https://www.facebook.com/123456789/posts/12345678"),
"123456789/posts/12345678")
})
context("drop")
test_that("drop", {
expect_equal( drop("https://www.facebook.com/123456789/posts/12345678"),
"/123456789/posts/12345678")
})
library(testthat)
library(SpeClust)
context("drop")
test_that("drop", {
expect_equal( drop("https://www.facebook.com/123456789/posts/12345678"),
"/123456789/posts/12345678")
expect_equal( drop("https://www.facebook.com/123456789/posts/XXXXXXX"),
"/123456789/posts/XXXXXXX")
})
A1 = spMatrix(nrow = 4, ncol = 3, i = c(1,1,2,3,3,4), j = c(1,2,3,1,2,3),
x = c(1,1,1,1,1,1))
A2 = spMatrix(nrow = 5, ncol = 4, i = c(1,2,2,3,4,5,5), j = c(1,2,3,1,2,4,4),
x = c(1,1,1,1,1,1,1))
rownames(A1) = c("a","b","c","d"); colnames(A1) = c("1","2","3")
rownames(A2) = c("a","b","d","e"); colnames(A2) = c("1","3","4","5")
rownames(A2) = c("a","b","d","e","f"); colnames(A2) = c("1","3","4","5")
library(SpeClust)
A1
A2
combind_fanwords(A1,A2)
A1;A2
combind_fanwords(A1,A2)
A = spMatrix(nrow = 6, ncol = 5, i = c(1,1,2,2,3,3,1,3,3,5),
j = c(1,2,3,4,1,2,1,3,3,5),
x = c(2,1,2,1,1,1,1,1,1,2))
combind_fanwords(A1,A2)==A
A
A = spMatrix(nrow = 6, ncol = 5, i = c(1,1,2,2,3,3,1,3,3,5),
j = c(1,2,3,4,1,2,1,3,3,5),
x = c(1,1,1,1,1,1,1,1,1,1))
combind_fanwords(A1,A2)==A
A
combind_fanwords(A1,A2)
A = spMatrix(nrow = 6, ncol = 5, i = c(1,1,2,2,3,3,4,4,5,6),
j = c(1,2,3,4,1,2,1,3,3,5),
x = c(2,1,2,1,1,1,1,1,1,2))
combind_fanwords(A1,A2)==A
context("combind_fanwords")
test_that("combind_fanwords", {
A1 = spMatrix(nrow = 4, ncol = 3, i = c(1,1,2,3,3,4), j = c(1,2,3,1,2,3),
x = c(1,1,1,1,1,1))
A2 = spMatrix(nrow = 5, ncol = 4, i = c(1,2,2,3,4,5,5), j = c(1,2,3,1,2,4,4),
x = c(1,1,1,1,1,1,1))
rownames(A1) = c("a","b","c","d"); colnames(A1) = c("1","2","3")
rownames(A2) = c("a","b","d","e","f"); colnames(A2) = c("1","3","4","5")
A = spMatrix(nrow = 6, ncol = 5, i = c(1,1,2,2,3,3,4,4,5,6),
j = c(1,2,3,4,1,2,1,3,3,5),
x = c(2,1,2,1,1,1,1,1,1,2))
rownames(A) = c("a","b","c","d","e","f"); colnames(A2) = c("1","2","3","4","5")
expect_equal( combind_fanwords(A1,A2), A)
})
library(testthat)
library(SpeClust)
context("combind_fanwords")
test_that("combind_fanwords", {
A1 = spMatrix(nrow = 4, ncol = 3, i = c(1,1,2,3,3,4), j = c(1,2,3,1,2,3),
x = c(1,1,1,1,1,1))
A2 = spMatrix(nrow = 5, ncol = 4, i = c(1,2,2,3,4,5,5), j = c(1,2,3,1,2,4,4),
x = c(1,1,1,1,1,1,1))
rownames(A1) = c("a","b","c","d"); colnames(A1) = c("1","2","3")
rownames(A2) = c("a","b","d","e","f"); colnames(A2) = c("1","3","4","5")
A = spMatrix(nrow = 6, ncol = 5, i = c(1,1,2,2,3,3,4,4,5,6),
j = c(1,2,3,4,1,2,1,3,3,5),
x = c(2,1,2,1,1,1,1,1,1,2))
rownames(A) = c("a","b","c","d","e","f"); colnames(A) = c("1","2","3","4","5")
expect_equal( combind_fanwords(A1,A2), A)
})
combind_fanwords(A1,A2)
A
rownames(A) = c("a","b","c","d","e","f"); colnames(A) = c("1","2","3","4","5")
combind_fanwords(A1,A2)
A
library(testthat)
library(SpeClust)
context("combind_fanwords")
test_that("combind_fanwords", {
A1 = spMatrix(nrow = 4, ncol = 3, i = c(1,1,2,3,3,4), j = c(1,2,3,1,2,3),
x = c(1,1,1,1,1,1))
A2 = spMatrix(nrow = 5, ncol = 4, i = c(1,2,2,3,4,5,5), j = c(1,2,3,1,2,4,4),
x = c(1,1,1,1,1,1,1))
rownames(A1) = c("a","b","c","d"); colnames(A1) = c("1","2","3")
rownames(A2) = c("a","b","d","e","f"); colnames(A2) = c("1","3","4","5")
A = spMatrix(nrow = 6, ncol = 5, i = c(1,1,2,2,3,3,4,4,5,6),
j = c(1,2,3,4,1,2,1,3,3,5),
x = c(2,1,2,1,1,1,1,1,1,2))
rownames(A) = c("a","b","c","d","e","f"); colnames(A) = c("1","2","3","4","5")
expect_equal( combind_fanwords(A1,A2), A)
})
combind_fanwords(A1,A2)
A
library(testthat)
library(SpeClust)
context("combind_fanwords")
test_that("combind_fanwords", {
A1 = spMatrix(nrow = 4, ncol = 3, i = c(1,1,2,3,3,4), j = c(1,2,3,1,2,3),
x = c(1,1,1,1,1,1))
A2 = spMatrix(nrow = 5, ncol = 4, i = c(1,2,2,3,4,5,5), j = c(1,2,3,1,2,4,4),
x = c(1,1,1,1,1,1,1))
rownames(A1) = c("a","b","c","d"); colnames(A1) = c("1","2","3")
rownames(A2) = c("a","b","d","e","f"); colnames(A2) = c("1","3","4","5")
A = spMatrix(nrow = 6, ncol = 5,
i = c(1,1,1,2,2,2,3,3,4,4,5,6,6),
j = c(1,1,2,3,3,4,1,2,1,3,3,5,5),
x = c(1,1,1,1,1,1,1,1,1,1,1,1,1))
rownames(A) = c("a","b","c","d","e","f"); colnames(A) = c("1","2","3","4","5")
expect_equal( combind_fanwords(A1,A2), A)
})
A1 = spMatrix(nrow = 4, ncol = 3, i = c(1,1,2,3,3,4), j = c(1,2,3,1,2,3),
x = c(1,1,1,1,1,1))
A2 = spMatrix(nrow = 5, ncol = 4, i = c(1,2,2,3,4,5,5), j = c(1,2,3,1,2,4,4),
x = c(1,1,1,1,1,1,1))
rownames(A1) = c("a","b","c","d"); colnames(A1) = c("1","2","3")
rownames(A2) = c("a","b","d","e","f"); colnames(A2) = c("1","3","4","5")
A = spMatrix(nrow = 6, ncol = 5,
i = c(1,1,1,2,2,2,3,3,4,4,5,6,6),
j = c(1,1,2,3,3,4,1,2,1,3,3,5,5),
x = c(1,1,1,1,1,1,1,1,1,1,1,1,1))
rownames(A) = c("a","b","c","d","e","f"); colnames(A) = c("1","2","3","4","5")
combind_fanwords(A1,A2)
A
combind_fanwords(A1,A2)$j
combind_fanwords(A1,A2)@j
A@j
combind_fanwords(A1,A2)@i+1
combind_fanwords(A1,A2)@j+1
A@@i+1
A@i+1
A2@i+1
library(testthat)
library(SpeClust)
context("combind_fanwords")
test_that("combind_fanwords"  {
A1 = spMatrix(nrow = 4,  ncol = 3,
i = c(1, 1, 2, 3, 3, 4),
j = c(1, 2, 3, 1, 2, 3),
x = c(1, 1, 1, 1, 1, 1))
A2 = spMatrix(nrow = 5,  ncol = 4 ,
i = c(1, 2, 2, 3, 4, 5, 5),
j = c(1, 2, 3, 1, 2, 4, 4),
x = c(1, 1, 1, 1, 1, 1, 1))
rownames(A1) = c("a", "b", "c", "d"); colnames(A1) = c("1", "2", "3")
rownames(A2) = c("a", "b", "d", "e", "f"); colnames(A2) = c("1", "3", "4", "5")
A = spMatrix(nrow = 6,  ncol = 5,
i = c(1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6),
j = c(1, 2, 1, 3, 3, 4, 1, 2, 3, 1, 3, 5, 5),
x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
rownames(A) = c("a", "b", "c", "d", "e", "f"); colnames(A) = c("1", "2", "3", "4", "5")
expect_equal( combind_fanwords(A1 A2),  A)
})
library(testthat)
library(SpeClust)
context("combind_fanwords")
test_that("combind_fanwords"  {
A1 = spMatrix(nrow = 4,  ncol = 3,
i = c(1, 1, 2, 3, 3, 4),
j = c(1, 2, 3, 1, 2, 3),
x = c(1, 1, 1, 1, 1, 1))
A2 = spMatrix(nrow = 5,  ncol = 4 ,
i = c(1, 2, 2, 3, 4, 5, 5),
j = c(1, 2, 3, 1, 2, 4, 4),
x = c(1, 1, 1, 1, 1, 1, 1))
rownames(A1) = c("a", "b", "c", "d"); colnames(A1) = c("1", "2", "3")
rownames(A2) = c("a", "b", "d", "e", "f"); colnames(A2) = c("1", "3", "4", "5")
A = spMatrix(nrow = 6,  ncol = 5,
i = c(1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6),
j = c(1, 2, 1, 3, 3, 4, 1, 2, 3, 1, 3, 5, 5),
x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
rownames(A) = c("a", "b", "c", "d", "e", "f"); colnames(A) = c("1", "2", "3", "4", "5")
expect_equal(combind_fanwords(A1 A2),A)
})
A1 = spMatrix(nrow = 4,  ncol = 3,
i = c(1, 1, 2, 3, 3, 4),
j = c(1, 2, 3, 1, 2, 3),
x = c(1, 1, 1, 1, 1, 1))
A2 = spMatrix(nrow = 5,  ncol = 4 ,
i = c(1, 2, 2, 3, 4, 5, 5),
j = c(1, 2, 3, 1, 2, 4, 4),
x = c(1, 1, 1, 1, 1, 1, 1))
rownames(A1) = c("a", "b", "c", "d"); colnames(A1) = c("1", "2", "3")
rownames(A2) = c("a", "b", "d", "e", "f"); colnames(A2) = c("1", "3", "4", "5")
A = spMatrix(nrow = 6,  ncol = 5,
i = c(1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6),
j = c(1, 2, 1, 3, 3, 4, 1, 2, 3, 1, 3, 5, 5),
x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
rownames(A) = c("a", "b", "c", "d", "e", "f"); colnames(A) = c("1", "2", "3", "4", "5")
expect_equal(combind_fanwords(A1 A2),A)
library(testthat)
library(SpeClust)
context("combind_fanwords")
test_that("combind_fanwords"  {
A1 = spMatrix(nrow = 4,  ncol = 3,
i = c(1, 1, 2, 3, 3, 4),
j = c(1, 2, 3, 1, 2, 3),
x = c(1, 1, 1, 1, 1, 1))
A2 = spMatrix(nrow = 5,  ncol = 4 ,
i = c(1, 2, 2, 3, 4, 5, 5),
j = c(1, 2, 3, 1, 2, 4, 4),
x = c(1, 1, 1, 1, 1, 1, 1))
rownames(A1) = c("a", "b", "c", "d"); colnames(A1) = c("1", "2", "3")
rownames(A2) = c("a", "b", "d", "e", "f"); colnames(A2) = c("1", "3", "4", "5")
A = spMatrix(nrow = 6,  ncol = 5,
i = c(1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6),
j = c(1, 2, 1, 3, 3, 4, 1, 2, 3, 1, 3, 5, 5),
x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
rownames(A) = c("a", "b", "c", "d", "e", "f"); colnames(A) = c("1", "2", "3", "4", "5")
expect_equal(combind_fanwords(A1, A2),A)
})
expect_equal(combind_fanwords(A1, A2),A)
library(testthat)
library(SpeClust)
context("combind_fanwords")
test_that("combind_fanwords" , {
A1 = spMatrix(nrow = 4,  ncol = 3,
i = c(1, 1, 2, 3, 3, 4),
j = c(1, 2, 3, 1, 2, 3),
x = c(1, 1, 1, 1, 1, 1))
A2 = spMatrix(nrow = 5,  ncol = 4 ,
i = c(1, 2, 2, 3, 4, 5, 5),
j = c(1, 2, 3, 1, 2, 4, 4),
x = c(1, 1, 1, 1, 1, 1, 1))
rownames(A1) = c("a", "b", "c", "d"); colnames(A1) = c("1", "2", "3")
rownames(A2) = c("a", "b", "d", "e", "f"); colnames(A2) = c("1", "3", "4", "5")
A = spMatrix(nrow = 6,  ncol = 5,
i = c(1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6),
j = c(1, 2, 1, 3, 3, 4, 1, 2, 3, 1, 3, 5, 5),
x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
rownames(A) = c("a", "b", "c", "d", "e", "f"); colnames(A) = c("1", "2", "3", "4", "5")
expect_equal(combind_fanwords(A1, A2),A)
})
